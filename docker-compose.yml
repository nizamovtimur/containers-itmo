services:
    db:
        build: ./db
        image: ragbot/db:latest
        container_name: ragbot-db
        restart: unless-stopped
        env_file:
            - .env
        volumes:
            - db-data:/var/lib/postgresql/data
        networks:
            - ragbot-conn
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 20s
            start_interval: 5s
    db-migrate:
        build:
            context: ./db
            dockerfile: Dockerfile-migrate
        image: ragbot/db-migrate:latest
        container_name: ragbot-db-migrate
        restart: no
        env_file:
            - .env
        depends_on:
            db:
                condition: service_healthy
        networks:
            - ragbot-conn
    qa:
        build: ./qa
        image: ragbot/qa:latest
        container_name: ragbot-qa
        restart: unless-stopped
        command: python main.py
        ports:
            - 8080:8080
        env_file:
            - .env
        depends_on:
            db:
                condition: service_healthy
            db-migrate:
                condition: service_completed_successfully
        networks:
            - ragbot-conn
    # chatbot:
    #     build: ./chatbot
    #     image: ragbot/chatbot:latest
    #     container_name: ragbot-chatbot
    #     restart: unless-stopped
    #     command: python main.py
    #     env_file:
    #         - .env
    #     depends_on:
    #         db:
    #             condition: service_healthy
    #         qa:
    #             condition: service_started
    #         db-migrate:
    #             condition: service_completed_successfully
    #     networks:
    #         - ragbot-conn
volumes:
    db-data:

networks:
    ragbot-conn:
        driver: bridge
